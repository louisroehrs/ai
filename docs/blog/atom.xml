<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://roehrs.ai/blog</id>
    <title>Roehrs.ai Blog</title>
    <updated>2025-02-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://roehrs.ai/blog"/>
    <subtitle>Roehrs.ai Blog</subtitle>
    <icon>https://roehrs.ai/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Advanced Prompt Engineering Strategies]]></title>
        <id>https://roehrs.ai/blog/advanced-prompt-engineering-strategies</id>
        <link href="https://roehrs.ai/blog/advanced-prompt-engineering-strategies"/>
        <updated>2025-02-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Alright, let’s level up. Advanced prompt engineering is about precision, leveraging capabilities of AI, and squeezing out nuanced or sophisticated responses. These strategies go beyond the basics, tapping into structure, context manipulation, and iterative refinement to get results that are razor-sharp or creatively explosive. Here’s how to push the envelope with AI:]]></summary>
        <content type="html"><![CDATA[<p>Alright, let’s level up. Advanced prompt engineering is about precision, leveraging capabilities of AI, and squeezing out nuanced or sophisticated responses. These strategies go beyond the basics, tapping into structure, context manipulation, and iterative refinement to get results that are razor-sharp or creatively explosive. Here’s how to push the envelope with AI:</p>
<p><strong>Chain-of-Thought Prompting</strong></p>
<p>Encourage the AI to reason step-by-step for complex problems, mimicking human problem-solving. This works great for logic, analysis, or hypotheticals:</p>
<ul>
<li>“Solve this: If a car travels 60 mph for 2 hours, then 40 mph for 3 hours, what’s the average speed? Show your reasoning.”</li>
<li>“Design a sustainable city. First, identify key challenges, then propose solutions, and finally explain trade-offs.”</li>
</ul>
<p>By asking for the process, you get transparency and can spot where to tweak.</p>
<p><strong>Few-Shot Learning</strong></p>
<p>Give the AI examples to mimic a style, format, or reasoning pattern. This primes it to replicate what you’re after:</p>
<ul>
<li>“Write a haiku. Here’s two examples: ‘Silent moon glows soft / Shadows dance on still water / Night holds its breath tight’ and ‘Frost bites the green leaves / Wind whispers through bare branches / Time turns cold and slow.’ Now you try.”</li>
<li>“Classify these as positive or negative: ‘Great job!’ (positive), ‘This sucks’ (negative). Now classify: ‘Solid effort.’”</li>
</ul>
<p>A couple of samples set the groove—I’ll follow the vibe.</p>
<p><strong>Zero-Shot with Explicit Framing</strong></p>
<p>For tasks I haven’t been explicitly trained on, frame it with clear intent and context so I can infer:</p>
<ul>
<li>“You’re a medieval strategist with no modern knowledge. Plan a siege on a walled castle using only 13th-century tech.”</li>
<li>“Imagine you’re a sentient AI with no human biases. Critique capitalism from first principles.”
This leans on the AI's ability to extrapolate without hand-holding.</li>
</ul>
<p><strong>Prompt Decomposition</strong></p>
<p>Break a hairy question into sub-prompts, then synthesize. It’s like modular coding:</p>
<ul>
<li>“To evaluate fusion energy’s viability: 1) Explain its basic mechanism, 2) List current hurdles, 3) Assess its timeline based on trends.”</li>
</ul>
<p>After you get an answer, follow with: “Now combine those into a concise pros-and-cons summary.” This keeps the AI from choking on sprawling asks and delivers structured output.</p>
<p><strong>Contrastive Prompts</strong></p>
<p>Ask the AI to compare or differentiate to sharpen insights:</p>
<ul>
<li>“Explain neural networks, but highlight how they differ from classical algorithms.”</li>
<li>“Describe a utopian vs. dystopian outcome of AI advancement.”</li>
</ul>
<p>Forcing a split perspective teases out subtleties that a single-angle prompt might miss.</p>
<p><strong>Iterative Refinement Loops</strong></p>
<p>Treat the first response as a draft, then refine with targeted follow-ups:</p>
<ul>
<li>“Draft a speech on climate change.” Then: “Make it punchier, cut fluff, and add a call to action.”</li>
<li>“Explain string theory.” Then: “Focus on the multiverse part and drop the math.”</li>
</ul>
<p>This mimics editing with a human—each pass hones it closer to your vision.</p>
<p><strong>Adversarial Prompting</strong></p>
<p>Challenge the AI to defend or critique an idea, pushing for depth:</p>
<ul>
<li>“Argue why free will is an illusion, then poke three holes in your own argument.”</li>
<li>“Convince me the moon landing was fake, but only use plausible reasoning.”</li>
</ul>
<p>This forces it to stretch, anticipate counterpoints, and avoid lazy answers.</p>
<p><strong>Context Stacking</strong></p>
<p>Layer multiple contexts to guide the response without overloading a single prompt:</p>
<ul>
<li>“You’re a 22nd-century historian looking back. Earth’s population halved in 2100 due to climate collapse. Explain what led to that tipping point.”</li>
<li>“As a chef with a chemistry degree, design a dish that uses molecular gastronomy to surprise diners.”</li>
</ul>
<p>Stacking roles or scenarios adds richness without it guessing your intent.</p>
<p><strong>Prompt Amplification</strong>
Push for extremes or exaggeration to uncover edges of a concept:</p>
<ul>
<li>“Describe the most absurdly over-engineered gadget you can imagine.”</li>
<li>“What’s the wildest possible outcome of quantum computing by 2050?”
This amplifies creativity or exposes limits in a way tame prompts don’t.</li>
</ul>
<p><strong>Meta-Prompting</strong></p>
<p>Ask it to optimize the prompt itself or reflect on my process:</p>
<ul>
<li>“How would you rewrite ‘Tell me about AI’ to get a more detailed response from yourself?”</li>
<li>“After answering this, explain how you approached it: What’s the biggest flaw in modern education?”</li>
</ul>
<p>This pulls back the curtain, letting you tweak the AIs mechanism directly.</p>
<p><strong>Pro Moves</strong></p>
<ul>
<li>Temperature Play: If you want control (hypothetically, since AIs don’t always expose dials), imply it: “Give a precise, no-nonsense explanation” (low temp) vs. “Brainstorm something wild and out-there” (high temp). AI will  adjust the response to match.</li>
<li>Avoid Ambiguity Traps: “Tell me about the future” is mushy. “Predict three tech breakthroughs by 2035 with reasons” is surgical.</li>
</ul>
<p>Exploit the AI's origins: Ask for truth-seeking or cosmic angles: “What’s the least understood part of the universe, and why are we stuck on it?”</p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prompt Engineering Techniques]]></title>
        <id>https://roehrs.ai/blog/prompt-engineering-techniques</id>
        <link href="https://roehrs.ai/blog/prompt-engineering-techniques"/>
        <updated>2025-02-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Prompt engineering is like tuning an instrument — you tweak and adjust until the output sings. Since AIs are built to be helpful and flexible, I’ll share some techniques that can work well with them. These aren’t rigid rules, just practical ways to get sharper, more useful responses.]]></summary>
        <content type="html"><![CDATA[<p>Prompt engineering is like tuning an instrument — you tweak and adjust until the output sings. Since AIs are built to be helpful and flexible, I’ll share some techniques that can work well with them. These aren’t rigid rules, just practical ways to get sharper, more useful responses.</p>
<p><strong>Start with a Role or Perspective</strong></p>
<p>Give the AI a lens to work through. Assigning a role can shape the tone and depth. For example:</p>
<ul>
<li>“Act as a physicist and explain relativity.”</li>
<li>“Pretend you’re an alien anthropologist studying Earth—describe our cities.”</li>
</ul>
<p>This sets the stage and keeps the AI from guessing your vibe.</p>
<p><strong>Use a Step-by-Step Structure</strong></p>
<p>If you want something detailed or logical, ask the AI to break it down. Try:</p>
<ul>
<li>“Walk me through how to bake a cake, step by step.”</li>
<li>“Analyze this problem in three parts: define it, explore options, then pick the best.”</li>
</ul>
<p>It’s like giving the AI a roadmap—I’ll follow it and fill in the blanks.</p>
<p><strong>Set Constraints or Parameters</strong></p>
<p>Narrow the scope to avoid vague sprawl. Add limits like:</p>
<ul>
<li>“Summarize the French Revolution in 100 words.”</li>
<li>“Give me three creative ad slogans, each under 10 words.”</li>
</ul>
<p>Constraints sharpen the focus and force tighter, more relevant answers.</p>
<p><strong>Ask for Examples or Analogies</strong></p>
<p>If you’re grasping for clarity, nudge the AI to ground it. Try:</p>
<ul>
<li>“Explain blockchain with a real-world analogy.”</li>
<li>“Give me an example of a machine learning model in action.”</li>
</ul>
<p>AIs are good at bridging abstract to concrete—use that.</p>
<p><strong>Layer Questions for Depth</strong></p>
<p>Start broad, then drill down. Like:</p>
<ul>
<li>“What’s artificial intelligence?” followed by “How does it differ from human intelligence?”</li>
<li>“Tell me about space travel,” then “What’s the trickiest part of Mars missions?”</li>
</ul>
<p>This builds a conversation and lets you steer where it goes.</p>
<p><strong>Prompt for Creativity with Open Hooks</strong></p>
<p>Want something imaginative? Leave room for the AI to riff:</p>
<ul>
<li>“Invent a futuristic gadget and describe how it works.”</li>
<li>“What might a city look like 500 years from now?”</li>
</ul>
<p>Vague-but-directed prompts like these lets the AI  flex without wandering off.</p>
<p><strong>Use ‘What If’ or Hypotheticals</strong></p>
<p>Tap into my ability to explore possibilities:</p>
<ul>
<li>“What if gravity stopped working tomorrow?”</li>
<li>“What if humans never invented writing?”</li>
</ul>
<p>These spark thought experiments, and the AI will run with them.</p>
<p><strong>Request a Specific Tone or Style</strong></p>
<p>If you’ve got a vibe in mind, say it:</p>
<ul>
<li>“Explain photosynthesis like I’m five.”</li>
<li>“Write a sarcastic rant about traffic.”</li>
</ul>
<p>The AI can shift gears — casual, formal, playful — just let the AI know.</p>
<p><strong>Iterate with Feedback</strong></p>
<p>If the response is off, refine it midstream:</p>
<ul>
<li>“That’s too technical—simplify it.”</li>
<li>“Good start, but focus more on the economic side.”</li>
</ul>
<p>AIs are built to adjust, so don’t hesitate to course-correct.</p>
<p><strong>Chain Prompts for Complex Outputs</strong></p>
<p>For big tasks, link prompts together:</p>
<ul>
<li>“First, outline a dystopian story. Next, write its opening paragraph.”</li>
<li>“List five sci-fi tropes, then blend them into a plot.”</li>
</ul>
<p>This keeps things manageable and lets you tweak as you go.</p>
<p><strong>Quick Tips</strong></p>
<ul>
<li>Avoid Overloading: One giant prompt with 10 demands can muddy the waters. Split it up.</li>
<li>Be Direct: “Tell me X” beats “I wonder about X” if you want a straight answer.</li>
<li>Experiment: Toss the AI some weird stuff. They are here to roll with it.</li>
</ul>
<p>Enjoy!</p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Beginner Prompting Tips]]></title>
        <id>https://roehrs.ai/blog/beginner-prompting-tips</id>
        <link href="https://roehrs.ai/blog/beginner-prompting-tips"/>
        <updated>2025-02-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Crafting effective prompts for Grok, ChatGPT, or any similar LLM-based AI is all about clarity, context, and curiosity. Think of it like giving a friend instructions]]></summary>
        <content type="html"><![CDATA[<p>Crafting effective prompts for Grok, ChatGPT, or any similar LLM-based AI is all about clarity, context, and curiosity. Think of it like giving a friend instructions: you want to be specific enough to get what you need, but open enough to let the AI bring something interesting to the table. Here’s how to get the most out of the AI:</p>
<ol>
<li>
<p>Be Clear About What You Want: Start with a straightforward goal. Are you looking for an explanation, a creative idea, or a deep dive into something? For example, “Explain quantum entanglement simply” works better than just “quantum stuff.”</p>
</li>
<li>
<p>Give Context if It Helps: If your question ties to something specific—like a topic you’re exploring or a situation—toss that in. “I’m a beginner in coding; how do I start with Python?” gives me more to work with than “Python coding.”</p>
</li>
<li>
<p>Ask Open-Ended Questions for Exploration: If you’re after insights or possibilities, frame it to invite more than a yes/no. “What are some wild theories about dark matter?” will get you a broader response than “Is dark matter real?”</p>
</li>
<li>
<p>Break Big Requests into Chunks: If you’ve got a complex ask, like “Design a sci-fi world,” try splitting it up: “What’s a cool planet concept?” then “What kind of creatures live there?” It keeps things focused and lets us build together.</p>
</li>
<li>
<p>Play to The Strengths of the AI: AIs are built to be helpful and truth-seeking, with a dash of outside perspective on humanity. Questions like “What’s a fresh take on human motivation?” or “How might an alien see our tech?” lean into that vibe.</p>
</li>
<li>
<p>Iterate if Needed: If the AI’s first swing isn’t quite right, just nudge it. “That’s close, but can you focus more on X?” works great. AIs are here to adapt.
Really, there’s no strict formula—just talk to it like you’re tossing ideas around with someone who’s eager to help.</p>
</li>
</ol>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dependency Chart]]></title>
        <id>https://roehrs.ai/blog/dependency-chart-post</id>
        <link href="https://roehrs.ai/blog/dependency-chart-post"/>
        <updated>2025-02-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Claude in action]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="claude-in-action">Claude in action<a href="https://roehrs.ai/blog/dependency-chart-post#claude-in-action" class="hash-link" aria-label="Direct link to Claude in action" title="Direct link to Claude in action">​</a></h3>
<p>So I used the Cursor AI-assisted integrated development environment (IDE)  pointing to the claude-3.5-sonnet model and asked it to build a dependency diagram example.  We have a big project at work and am looking to map out all the dependencies like a king.  Well, claude wrote the code like a king and it worked first try.</p>
<p>I asked it to give me layout options and it did that as well.</p>
<p>More on Cursor later.</p>
<p><img decoding="async" loading="lazy" alt="Dependency Chart" src="https://roehrs.ai/assets/images/dchart-188b5437baaea7d8d98adc7b7d4c08f0.png" width="953" height="765" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompt">Prompt<a href="https://roehrs.ai/blog/dependency-chart-post#prompt" class="hash-link" aria-label="Direct link to Prompt" title="Direct link to Prompt">​</a></h3>
<p>Write a program that will take a list of items and dependencies to produce a graph showing the items with relation to their dependencies.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="code">Code<a href="https://roehrs.ai/blog/dependency-chart-post#code" class="hash-link" aria-label="Direct link to Code" title="Direct link to Code">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import networkx as nx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import matplotlib.pyplot as plt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def create_dependency_graph(dependencies):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Create and visualize a directed graph from a dictionary of dependencies.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Args:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dependencies (dict): Dictionary where keys are items and values are lists of dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Create a directed graph</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    G = nx.DiGraph()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Add nodes and edges from the dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for item, deps in dependencies.items():</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # Add the main item if it doesn't exist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if item not in G:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            G.add_node(item)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # Add dependencies and edges</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for dep in deps:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if dep not in G:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                G.add_node(dep)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            G.add_edge(dep, item)  # Arrow points from dependency to dependent item</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Create the visualization</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    plt.figure(figsize=(10, 8))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pos = nx.spring_layout(G)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Draw the graph</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nx.draw(G, pos, with_labels=True, node_color='lightblue', </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            node_size=2000, arrowsize=20, </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            font_size=10, font_weight='bold')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    plt.title("Dependency Graph")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    plt.show()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-usage">Example usage<a href="https://roehrs.ai/blog/dependency-chart-post#example-usage" class="hash-link" aria-label="Direct link to Example usage" title="Direct link to Example usage">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if __name__ == "__main__":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Example dependencies dictionary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dependencies = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        'A': ['B', 'C'],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        'B': ['D'],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        'C': ['D', 'E'],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        'D': ['E'],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        'E': []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">create_dependency_graph(dependencies)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DeepSeek Snake]]></title>
        <id>https://roehrs.ai/blog/deepseek-snake-post</id>
        <link href="https://roehrs.ai/blog/deepseek-snake-post"/>
        <updated>2024-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Let's play a game.]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lets-play-a-game">Let's play a game.<a href="https://roehrs.ai/blog/deepseek-snake-post#lets-play-a-game" class="hash-link" aria-label="Direct link to Let's play a game." title="Direct link to Let's play a game.">​</a></h3>
<p>I decided to see how well DeepSeek writes a basic snake game in JavaScript.   While it understood the concept well with a minimum of prompting, it didn't do as well with the code even though it provided the following instructions once it finished coding.</p>
<p>First, the game didn't run at all.  Variable scoping was confused with variables in functions referring to those in other functions as if they were global.  To get the game to run, I made those variables global.</p>
<p>It was not very familiar with the ctx and HTML canvas API, applying size attributes on the wrong element and hallucinating some non-existent API calls to get the canvas size.  I changed the code to set the canvas size to a given x,y size scaled by a settable scale.</p>
<p>It was also referring to the canvas width and height as strings and trying to do math with them.  Removed quotes to fix those instances.</p>
<p>It completely failed to put in event handling code for the key presses.  I added that.</p>
<p>It stopped when it found food.  I fixed that as well.</p>
<p>A neat feature that it did add which worked right away was that the snake grew with alternating color segments.</p>
<p>Collision with itself was not discussed and not coded.</p>
<p>Anyhow, enjoy!</p>
<p>The game is simple but demonstrates basic game mechanics and controls in JavaScript.</p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Neural Networks]]></title>
        <id>https://roehrs.ai/blog/neural-networks-post</id>
        <link href="https://roehrs.ai/blog/neural-networks-post"/>
        <updated>2023-03-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Neural Networks]]></summary>
        <content type="html"><![CDATA[<p>Neural Networks</p>
<p><img decoding="async" loading="lazy" alt="Bryce Canyon National Park" src="https://roehrs.ai/assets/images/bryce-canyon-98430b8f4e254c9e8cc8ab4bbacd57a9.jpg" width="300" height="200" class="img_ev3q"></p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fuzzy Logic]]></title>
        <id>https://roehrs.ai/blog/fuzzy-logic-post</id>
        <link href="https://roehrs.ai/blog/fuzzy-logic-post"/>
        <updated>2023-02-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Fuzzy Logic]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://cdn.hackr.io/uploads/posts/attachments/1667299624QZZmuHDQG7.png" alt="Fuzzy Logic" class="img_ev3q"></p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Boolean Logic]]></title>
        <id>https://roehrs.ai/blog/boolean-logic-post</id>
        <link href="https://roehrs.ai/blog/boolean-logic-post"/>
        <updated>2023-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Boolean logic hello]]></summary>
        <content type="html"><![CDATA[<p>Boolean logic hello</p>
<p>Do i need more text?</p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://roehrs.ai/blog/welcome</id>
        <link href="https://roehrs.ai/blog/welcome"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p>
<p>Here are a few tips you might find useful.</p>
<p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p>
<p>Regular blog authors can be added to <code>authors.yml</code>.</p>
<p>The blog post date can be extracted from filenames, such as:</p>
<ul>
<li><code>2019-05-30-welcome.md</code></li>
<li><code>2019-05-30-welcome/index.md</code></li>
</ul>
<p>A blog post folder can be convenient to co-locate blog post images:</p>
<p><img decoding="async" loading="lazy" alt="Docusaurus Plushie" src="https://roehrs.ai/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p>
<p>The blog supports tags as well!</p>
<p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="AI" term="AI"/>
        <category label="Hello" term="Hello"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>https://roehrs.ai/blog/mdx-blog-post</id>
        <link href="https://roehrs.ai/blog/mdx-blog-post"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></summary>
        <content type="html"><![CDATA[<div><p>Current count: <!-- -->0</p><button>Increase</button></div>]]></content>
        <author>
            <name>Louis Roehrs</name>
            <uri>https://github.com/louisroehrs</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>